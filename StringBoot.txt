■ STEP 1. project
  - enc UFT-8 --> workspace / css / html / jsp / xml
  - project
	spring starter project -> type : maven
	::Depeendencies
	DevTools , Lombok , H2 Database , Spring Data JPA , Mysql Driver , Thymeleaf , Spring web
	::2 버전체크
	pom.xml -> spring boot starter parent 2.7.14 ver // java.version 11
	bildpath 설정 후 프로젝트 업데이트
	::3 실행
	Spring boot app 서버로 실행 서버는 하나 끝나면 종료하고 실행해야 오류없이 실행됨

	연습 ) boot002 project 만들기

■ STEP 2. setting ( properties )
	jpa
	1) application.properties
	2) @Entitiy DTO/테이블만들기
	3) @Repasitory - DAO

■ STEP 3. db

■ STEP 4. view
1. pom.xml 세팅확인 >> thymeleaf
<dependency>
<groupId>org.springframework.boot</groupId>
<artifactId>spring-boot-starter-thymeleaf</artifactId>
</dependency>
<!--  https://mvnrepository.com/artifact/nz.net.ultraq.thymeleaf/thymeleaf-layout-dialect  -->
<!--  추가  -->
<dependency>
<groupId>nz.net.ultraq.thymeleaf</groupId>
<artifactId>thymeleaf-layout-dialect</artifactId>
</dependency>
<!--  추가  -->
2. application.properties 설정확인
3. layout
4. 화면설정

■ STEP 5. board
#1. id / pass가 같으면 delete 해주기

#2. id / pass 같으면 btitle bcontent 수정

#3. 글검색부분은 작성자 및 글제목으로 가능하게(도전)
select  distinct b  
from Board b  left  join   Member m  on  b.member = m
where    b.title       like  %:key%  
       or  b.content  like  %:key%  
       or  m.name    like  %:key%  

■ STEP 6. security
1. spring security?
1) 애플리케이션의 보안(인증,인가) 담당
2) filter의 흐름에 따라 처리

2. 인증 vs 인가
1) 인증 - 본인이 맞는지 확인           ex) 여권-본인이 맞는지 인증
2) 인가 - 인증된 사용자가 접근가능   ex) 탑승 o 조종석까지 가기 x --> 접근권한

3. 아키텍쳐
1) 사용자가 로그인폼에서 로그인 시도 (username+password 전달)
2) UsernamePasswordAuthentication 요청정보 - Authentication 생성
3) Authentication 인증처리

10) 인증완료(사용자정보) SecurityContextHolder에 담기
 - AuthenticationSuccessHandler 성공!
 - AuthenticationSuccessHandler 실패!

3) 아키텍쳐2
 4) Authentication Manager 인증담당
    -UsernamePasswordAuthentication Token은 Provider 찾는데사용
5) AuthenticationProvider  - 로그인정보와 db정보를 비교
6) UserDetailService  - db에 있는 사용자 정보 가져오기

----실습
spring project            pom.xml :: 프로젝트 작성할 때 spring security 추가 버전 5로 수정
localhost:8080/login    로그인창 ->인증(본인확인)

Using generated security password: 5390c838-6588-48cc-b1df-04cee0caae63

SecurityConfig.java     설정
Member                  @Entity   
MemberRepository    CRUD(Dao)
MemberService
Controller
view                     연동

------------------------------------------------------------------------------------------------------
■ ERD ( Entity Relationship Diagram )

Step 1) 정규화?
1. 관계형 대에터모델 - 데이터간 관계에 초점을 둔 모델
2. 이상 (Anomaly)    - 공간낭비
  - 삽입, 갱신, 삭제 이상  
3. 정규화? 이상을 제거하는 것

Step 2) ERD 핵심구성요소
1. 개체(Entity) - 테이블, 개념의 정보단위 ( 개체 = Entity = 테이블 = 도메인)
2. 속성(Attribute) - 테이블의 열, 가장 작은 논리적 단위
3. 관계(Relationship) - 외래키

예) 
emo (deptno)-사원            -            dept (deptno)-부서
*JPA
@ManyToOne                                  @OneToMany(mappedBy="dept")

Step 3) 정규화 1NF-5NF ( NF : Nomal Form )
-----------------------------------------------------------------------------
★ 1NF : 관계(최소형) - 최소한 테이블, [중복]되는 항목이 없어야 함

QUESTION1)
[BEFORE]
CUSTOMERID   FIRSTNAME   SURNAME   TELEPHONE NUMBER
-------------------------------------------------------------------------------------------
123	          ROBERT         INGRAM      555-861-2025
-------------------------------------------------------------------------------------------
456	          JANE              WRIGHT      555-403-1659
                                                                        555-776-4100
-------------------------------------------------------------------------------------------
789	          MARIA          FERNADES   555-808-9633
-------------------------------------------------------------------------------------------

[AFTER]
CUSTOMERID   FIRSTNAME   SURNAME   TELEPHONE NUMBER
-------------------------------------------------------------------------------------------
123	          ROBERT         INGRAM      555-861-2025
-------------------------------------------------------------------------------------------
456	          JANE              WRIGHT      555-403-1659
-------------------------------------------------------------------------------------------
456	          JANE              WRIGHT      555-776-4100
-------------------------------------------------------------------------------------------
789	          MARIA           FERNADES   555-808-9633
-------------------------------------------------------------------------------------------

=====================================================
★ 2NF : 부분함수 종속제거 - 모든 속성이 기본키에 완전함수 종속
               ~알면      ~를 알 수 있다
               X(결정자) → Y(종속자)

[AFTER2]

[NAMEINFO]
CUSTOMERID  →  FIRSTNAME   SURNAME   
ID를 알면                이름정보를 알 수 있다.

--테이블 1
CUSTOMERID   FIRSTNAME   SURNAME   
-------------------------------------------------------
123     	          ROBERT          INGRAM      
-------------------------------------------------------
456  	          JANE               WRIGHT      
-------------------------------------------------------
789	          MARIA            FERNADES   
-------------------------------------------------------

--테이블2
CUSTOMERID       TELEPHONE NUMBER
----------------------------------------------------
123                         555-861-2025
----------------------------------------------------
456                         555-403-1659
----------------------------------------------------
456                          555-776-4100
----------------------------------------------------
789                         555-808-9633
----------------------------------------------------

★ 2NF : 부분함수 종속제거 - 모든 속성이 기본키에 완전함수 종속
               ~알면      ~를 알 수 있다
               X(결정자) → Y(종속자)
	기본키에 완전함수종속 

1. {STD_ID, 과목} → 성적
2. {STD_ID}          → 교수, 학부
3. {PROPESSOR} → 학부

=====================================================
★ 3NF : 이행함수 종속제거 before) X -> Y -> Z
	                             after  )  X-> Y // Y -> Z
	다른후보키에 의존하지 않음. - (결정자는 기본키만 잡으면 됨)

=====================================================
★ BCNF : 모든 결정자 후보키 (유일성 + 최소성) 

이 이상으로 끊으면 장점보단 단점이 많아서 최대 이쪽까지만
=====================================================
★ 4NF : 다치종속  // 
	게시판          /          해시태그          /          
	교수2명       /            교재2개

=====================================================
★ 5NF : 조인종속   다:다관계  -> 중간테이블 필요

게시판			해시코드
firstContent #Good                  1. good
seconde #good #Beer               2. beer
third #good #sad                      3. sad

게시판		게시판해시코드(중간)	해시코드
1		1	1		1. good
1		1	2		1. good
2                                 1               2                    	2. beer

■ ~로 구현되어 있다 1:1
ex001 ) 하나의 A는 하나의 B로 구성되어 있다
[홍길동]    ─┼──┼─  [목숨]
[홍길동]  ─┼──┼─  [주민증]

ex002 ) 하나의 A는 여러개의 B로 구성되어 있다
한명의 학생은 여러개의 수강내역을 가진다
[홍길동]    ─┼────∈    김교수,나교수,다교수

ex003  )  1:1 or 다대다

1. 학과와 학생의 관계
학과는 많은 학생을 가진다

학과(Department)         ┼─ ─ ─ ─∈       학생(Student)

학과코드(dept_id :: PK)                                 학번(std_id) :: PK
학과명(dept_name)                                       성명(std_name)
                                                                         키(height)
                                                                         학과코드(dept_id)  :: FK 외래키

학과-부모테이블  학생-자식테이블
점선 - 외래키
실선 - 동일키가 있을때
 
2. 학과와 교수의 관계
학과는 많은 교수를 가진다

학과(Department)         ┼─ ─ ─ ─∈       교수(Professor)

학과코드(dept_id :: ★PK)                             교수코드(prof_id), :: ★PK
학과명(dept_name)                                       교수명(prof_name), 
                                                                         학과코드(dept_id)  ::  ☆FK 외래키


3. 교수와 개설과목의 관계
교수는 많은 개설과목을 가진다

교수(Professor)         ┼─ ─ ─ ─∈       개설과목(Course)

교수코드(prof_id),                                    과목코드(course_id), ★PK
교수명(prof_name),                                 과목명(course_name)
학과코드(dept_id)                                    종료일(end_date)
                                                                   시작일(start_date), 
                                                                   교수코드(prof_id), ☆FK

4. 과목과 학생의 관계
학생은 많은 과목을 가진다
과목은 많은 학생을 가진다

학생(Student)      ┼────∈           수강(std_Course)        ∋───┼   개설과목(Course)

학번(std_id) :: ★PK                              학번(std_id),★PK                            과목코드(course_id), ★PK
성명(std_name)                                     과목코드(course_id)★PK               과목명(course_name), 
키(height)                                                                                                       교수코드(prof_id),☆FK
학과코드(dept_id)  :: ☆FK 외래키                                                                 시작일(start_date), 
                                                                                                                          종료일(end_date)
다대 다 관계
부모테이블 -개설과목, 학생 /// 자식테이블 - 수강
실선



