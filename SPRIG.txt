■1. SPRING


-------------------------------------
#1. SPRING?
-------------------------------------
▶STEP 0. jsp
1. mvc1 - jsp가 controller 역할
2. mvc2 - servlet이 controller 역할
3. FrontController

▶STEP 1. framework
1. framework [ 디자인패턴 + 라이브러리 = 프레임워크 ]
2. 소프트웨어 개발의 뼈대역할

▶STEP 2. ioc + di
★1. ioc : inversion of control :: 제어의 역전
 - 인스턴스의 생성~소멸까지 생명주기를 개발자가 아니라 컨테이너(spring)가 하는 것
 - pojo ( plain old java object )

 class A{}
 A a1 = new A()

 생성 → 초기화 → 서비스 → 소멸
  ↑                                 ↓
..........................................................................................
 ioc 가 아닌경우 - [ 개발자 → (class A)
		         →  (class B) ]

 ioc의 경우 [ 개발자 ← (Class A)
                          ← (Class B) ] ★ 컨테이너

따라서... new 코드 사용 안함
..........................................................................................

2. di : dependency injection :: 의존성 주입
 - 각 클래스간의 의존관계를 [설정파일]을 통해서 [컨테이너]가 자동으로 연결
 - 장점 : 코드 단순화 / 결합도 제거


----------------------------------------------------
    1. dynamic web project - spring000
    2. configure  - [Convert to Maven Project]


    3. spring      - add Spring project Nature
    4. java se-11 / project facts, build path

실습3 spring mvc
---------------------------
1. 검색-spring
2. legacy project
3. mvc project

※ 플러그인
 \.metadata\.plugins\org.springsource.ide.eclipse.commons.content.core

※ import해서 완성된 파일 가져오기

=====================================================
Spring 정리
=====================================================
1. 프레임워크 
 - 소프트웨어의 개발의 뼈대역할 디자인패턴+라이브러리
2. ioc
 - 인스턴스의 생성부터 소멸까지 생명주기를 spring이 관리
3. di
 - 각 클래스의 의존관계를 설정파일을 통해 컨테이너가 자동으로 연결
4. bean
 - 스프링이 관리하는 객체
 -beanFactory ← ApplicationContext


=====================================================
#3. Bean
=====================================================
▶ BEAN?
1. bean Spring이 관리하는 객체
2. xml vs Annotation

 2-1. xml - [운영]
 - 모든 bean을 "명시적"으로 xml에 등록
 - 관리/배포 용도
 - 여러 개발자가 같은 설정파일을 공유해서 개발하면 수정 시 충돌이 일어날 경우가 많음.

 2-2. Annotation (Bean Scanning) [개발]
 - Bean @를 붙여서 자동인식
 - 개발 속도 향상
 - 단점 : Bean간의 의존관계를 파악하기 힘듦

▶2. @Component
1. @Component 일반적인 컴포넌트(객체) 
2. @Component 구체화된 형식 
         @Controller(웹 요청받아 응답), @Service(비즈니스 로직), @Repository(DB연동)

<context:component-scan base-package="경로" />

=====================================================
#4. DB(jdbc)/MYBATIS
=====================================================
▶ 1. DataSource
SimpleDriverDataSource 가장 단순버전
 - getConnection() 매번생성 

 - mysql-connector-java / spring-jdbc

▶ 2. Mybatis ( sql )
1. sql 별도로 파일분리하여 관리
2. ORM ( object realtional mapping ) 프레임워크

3. mybatis
=========================
1. SqlSessionFactoryBean

2. SqlSessionFactory → <<SqlSession>> → mapper.xml 
			:: insert update delete select 처리

※SqlSessionFactory SqlSession 생성관리
※SqlSession : sql실행, 트랜잭션
=========================

4. 실습
mybatis 다운로드
mybatis-spring
   <!-- https://mvnrepository.com/artifact/org.mybatis/mybatis -->
   <dependency>
       <groupId>org.mybatis</groupId>
       <artifactId>mybatis</artifactId>
       <version>3.5.6</version>
   </dependency>
   <!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring -->
   <dependency>
       <groupId>org.mybatis</groupId>
       <artifactId>mybatis-spring</artifactId>
       <version>2.0.6</version>
   </dependency>

#설정파일
   ## mapper 설정파일(1)
   [Preferences] - [Xml] - Templates - New - New XML
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE mapper
     PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
     "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
   <mapper namespace="org.mybatis.example.BlogMapper">
   </mapper>
   
   ## mapper 설정파일(2)  
   [Preferences] - [Xml] - Templates - New - New XML
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE configuration
     PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
     "https://mybatis.org/dtd/mybatis-3-config.dtd">
   <configuration>
   </configuration>

Dto(UserDto)
com.company.dto UserDto
private int no
private String name
private int age

생성자 tpString getter/setter

Dao (UserDao UserDaolmpl user-mapper.xml

==========================================================================
#5. DB/MYBATIS(2)
==========================================================================
▶ mybatis --version 1
-  TestDao Impl mapper.xml 파일양 줄이고싶음
-  SqlSession sqlSession , namespace="com.company.dao.TestDao" 코드안에 있어서 불편, 설정파일설정

TestDao <<interface>>
         ↑
TestDaoImpl <class>
---------------------------------------------------------------------------------
@Repository
public class TestDaoImpl implements TestDao{
	@Autowired  private SqlSession sqlSession;  //sql 실행
	private static final String namespace="com.company.dao.TestDao";
---------------------------------------------------------------------------------
test-mapper.xml

▶ mybatis --version 2
-  root-context에 설정파일을 넣자

	@Autowired  private SqlSession sqlSession;  //sql 실행
	private static final String namespace="com.company.dao.TestDao";
	↓
	<bean id = "" class = "MapperFactoryBean">
	↓
	Impl 구현클래스 삭제, root-context 수정
	↓
	<bean id="testDao" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<property name="sqlSessionTemplate" ref="sqlSession"></property>
		<property name="mapperInterface" value="com.company.dao.TestDao"/>
	</bean>


com.company.dao.BoardDao

com.company.dao.BoardDao

▶ mybatis --version 3
-  MapperScannerConfigurer

==========================================================================
#6. mvc Project
==========================================================================
▶ 1.mvc
>>서로 영향없이 고칠 수 있는 애플리케이션을 만들자
Model		정보 dto, dao, service
View		화면 html, css, js/jquery
Controller	처리

▶ mvc1 vs mvc2
mvc1 controller > jsp
mvc2 controller > servlet
FrontController > 공통작업수행 > 세부컨트롤러에게 View 처리

▶ 3. spring mvc
[클라이언트]
↓ ① list.do
[ FrontController ]
<< DispatcherServlet >> → ② HandlerMapping - @Controller
                                       ↓ 
                                   ③ 세부 Controller - db가 db 처리
                                       ↓ ↑
                                   ④ View
① 클라이언트 ( 코요테 web.xml root-context.xml / servet-context.xml )
② DispatcherServlet  - HandlerMapping - @Controller / 처리할 controller 확인
③ 세부 Controller 클라이언트 요청처리 ( service 비즈니스로직 )
④ 요청결과와 View정보를 DispatcherServlet에 반환 / View 개체를 생성해서 응답


==========================================================================
#7. 유용한 기능들
==========================================================================
▶ 1. jstl
   1) pom.xml
      <!-- https://mvnrepository.com/artifact/javax.servlet/jstl -->
      <dependency>
         <groupId>javax.servlet</groupId>
         <artifactId>jstl</artifactId>
         <version>1.2</version>
      </dependency>

   2) Model
      -table
      -dto UserDto / mapper-config.xml
      -dao UserDao / user-mapper.xml / root-context.xml (등록)

   3) @Repository -Dao (sql 실행)
      - Service (비즈니스 로직 처리)
      - 상세보기 조회수올리는 sql 해당번호 상세보기 데이터


▶ 2. dto → lombok
    0. https://mvnrepository.com/artifact/org.projectlombok/lombok
lombok 1.18.18

<!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
<dependency>
    <groupId>org.projectlombok</groupId>
    <artifactId>lombok</artifactId>
    <version>1.18.18</version>
    <scope>provided</scope>
</dependency>


    1. https://projectlombok.org/download
    2. 다운로드
    3. 더블클릭 /   cmd창     java  -jar    파일이름.jar
        설치경로 설정
    4. spring 다시 열기

    ※ 만약 인식이 안되면....
      1. C드라이브로 스프링zip. 옮기기 - 압축풀기
      2. 경로 짧게

▶ 3. aop (관점지향) 
1) 핵심기능 vs 부가기능 
  - 핵심기능 : 비즈니스로직
  - 부가기능 : 비즈니스로직을 도움

2) Aspect
  - AOP (Aspect Oriented Prograamming
  - Aspect : 관점, 어떤행동, 시작, 완료 반복... 나타내는 행위
  - Advice (부가기능정의) + PointCut(적용부위) = Aspect 

3) 용어
Target : (대상)
Advice : (부가기능정의)
PopintCut : 적용타겟에 메서드 대상을 선별하는 정규식
Weaving : Target(대상)에 Advice(부가기능)을 처리(삽입)하는 과정

4) 특징
프록시(대리) 기반의 Aop
프록시 Target(대상)에 Advice(부가기능)을 처리(삽입)하는 과정 과정에서 생성되는 객체

▶ 4. HikariCP --> mybatis 업그레이드 dbcp-HikariCP / sql과정-log4jdbc 다 보이게
1) pom.xml 플러그인 추가
      <!-- HikariCP -->
      <!-- HikariCP -->
      <!-- https://mvnrepository.com/artifact/com.zaxxer/HikariCP -->
      <dependency>
          <groupId>com.zaxxer</groupId>
          <artifactId>HikariCP</artifactId>
          <version>2.7.4</version>
      </dependency>
         
      <!-- https://mvnrepository.com/artifact/org.bgee.log4jdbc-log4j2/log4jdbc-log4j2-jdbc4 -->
      <dependency>
          <groupId>org.bgee.log4jdbc-log4j2</groupId>
          <artifactId>log4jdbc-log4j2-jdbc4</artifactId>
          <version>1.16</version>
      </dependency>
      <!-- HikariCP -->
      <!-- HikariCP -->
      <!-- HikariCP --> 

2) db.properties / root-context.xml
3) hikari properties 설정

▶ 5. Tx sql --> 여러 개 실행될 시 중간에 실패하면 sql 다 처리 안되게
 - 트랜잭션
 - 여러단계의 처리를 하나의 처리처럼 다루는 기능
 - 반영(commit) / 되돌리기(rollback)

1) pom.xml
		<!-- spirng-tx start -->
		<!-- spirng-tx start -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId>
			<version>${org.springframework-version}</version>
		</dependency>
		<!-- spirng-tx end -->
		<!-- spirng-tx end -->
2) root-context.xml
 - DataSourceTransactionManager
 - <tx:annotion-driven>



==========================================================================
#8. restful
==========================================================================

















