● 6. 상속(extends)
1. 상속? - 클래스의 재사용 - 새로운 부분만 추가, 수정하여 사용

2. super(부모, 상위, parent) vs sub(자식, 하위, child)
     재사용되는 부분		새로운 부분이 추가됨

3. 모든 클래스는 Object 클래스를 상속

4. UML - 부모 ← 자식 // 자식은 부모를 가져다 사용한다 
5. 장점
   -빠른 개발, 코드의 중복성 제거, 다형성(하나의 타입으로 여러 타입을 관리)

6. 문법
 class 자식 클래스 extends 부모클래스(O) 단일상속

 class 자식 클래스 extends 부모클래스1, 부모클래스2(X)

7. 상속 시 부모 속성을 사용할 수 있는 이유
   -부모생성자를 호출해 (super)
    부모의 인스턴스 변수를 초기화해 사용 가능하게 만들어 줌

8. 오버라이드
   -@Override
   -extends-상속 시 부모의 메소드와 동일한지 비교


● 6-2. 클래스 다이어그램
1. 시스템을 구성하는 클래스들 사이 관계를 표현
2. 클래스 - 객체를 생성하는 설계도

3. https://staruml.io/

4. 사용법
  - 좌측하단 클래스 생성
----------------------------
          [클래스명]
----------------------------
add attribute :: 멤버변수설정
----------------------------
add operration :: 멤버함수설정

좌측하단 메뉴
Generalization ::상속관계

5. UML 관계
   1) 연관관계
   2) 일반화관계
   3) 집합관계
   4) 의존관계
   5) 실체화관계 ( 인터페이스 )
..........................................................................................................................
2) 일반화관계 >>상속관계 >>IS-a 관계 :: 속이 빈 화살표
	::한 클래스가 다른 클래스를 포함하는 상위개념

 - 고양이는 동물이다 O is - A 관계
 - 사람도 동물이다 O
 - 동물은 고양이다 X

5) 실체화관계 ( 인터페이스-implements, Can do this, 빈삼각형과 점선체크) 
    5-1) 약속할게...
    5-2) 객체가 해야할 일, 할 수 있는 일 - 책임
    ::실선은 무조건 되는거 점선은 깨질수도 있는거

..........................................................................................................................


● 7. 다형성
1. 다형성
 - 많은 형상을 띄는 성품
 - 여러타입의 객체를 하나의 타입으로 관리 (자식타입들을 부모타입 하나로 관리)

2. 부모는 자식을 담을 수 있다. (업캐스팅)
----------------------------------------------------
<<class>> Animal {이름, 나이 / 먹기, 자기, 배변}
	↑
<<class>> Cat {동물등록증/꾹꾹이하기}
----------------------------------------------------

Animal ani = new Cat();

2-1) Animal ani { 이름, 나이 / 먹기, 자기, 배변  }
2-2)               new Cat(){동물등록증/꾹꾹이} > Animal() > Object()
2-3)					{이름,나이/먹기,자기,배변}


3. 자식은 부모를 담을 수 있다(다운캐스팅)
----------------------------------------------------
<<class>> Animal {이름, 나이 / 먹기, 자기, 배변}
	↓
<<class>> Cat {동물등록증/꾹꾹이하기}
----------------------------------------------------

Cat cat = new Animal();
1. Cat cat;
{ 이름,나이/먹기,자기,배변 }+{ 동물등록증/꾹꾹이하기 }

2. new Animal();
{ 이름,나이/먹기,자기,배변 }

3. 만족 못시키는 범위 발생
{ 동물등록증/꾹꾹이하기 }

해결방안 :: 부모가 자식을 담은 경험이 있게 만들기 // 

4. 쓰는 이유
부모타입으로 자식객체를 관리가능하게 만들기 위해


● 8. abstract
1. 추상화(abstract)
 - 실체화된 객체들 간에 공통되는 특성을 추출한 것
 - 미완성적인 개념 (new 사용불가)
 - 공통된 필드와 메서드의 이름을 통일할 목적

2. 추상클래스
abstract class Animal{ //추상메서드가 있는 클래스
	String name; 	    // instance변수 this
	abstract void sound(); // abstract method >> {} 구현부 없음
}
class extends Animal {	@Overrids void sound(){}	}
Animal ani = new Animal(); >> X

자식클래스를 이용하여 구현함


● 9. Interface
1. interface 
 - 개발코드와 객체 사이 연결 // 설계와 구현을 분리
 - 개발코드 변경없이 객체를 바꿔낄수 있도록 하는 역할

2. abstract( Is A : 고양이는 동물이다(kind of) ) vs interface( can do this )
 - 추상화 정도가 interface가 더 높다
 1) abstract : 인스턴스변수, 일반메서드 추상메서드 둘 다 가질 수 있으나
 2) interface : 상수(public static final) + 추상메서드(public abstract)만 가짐

3. 프로젝트 진행 시 interface 사용하면
	다른 구성원들이 각각의 부분을 완성할때까지 기다리지 않고 
	규약만 정해두고 본인부분만 작성

4. interface 형식

 interface 인터페이스명 {
	상수; // public static final 자동으로 붙음 > method area
	추상메서드; // public abstract 자동으로 붙음 > 구현부 X > heap / this와 관계X
	}
  
 class InterSon implements 인터페이스명{	 } //implements interface를 구현할게

 class InterSon2 extends 클래스명 implements 인터페이스명1, 인터페이스명2{		 } 
					//구현력이 없어서 다중상속 가능



● 10. 익명클래스
1.익명클래스
 - 이름 없는 객체
 - 한 번만 사용하고 버려지는 객체를 사용할 때
 - 인터페이스 테스트, ui 이벤트 처리객체


◆ 1. Collection Framework
1. 저장단위
변수 < 배열 < 클래스 < 컬렉션 프레임워크 < 파일 < db

2. 컬렉션 프레임워크
- [배열]의 단점을 개선한 클래스, 객체(클래스)만 저장가능
- 동적배열

- 배열
1) 같은 타입만 묶어서 저장가능
2) 배열 생성 시 크기를 지정하여 사용, 추후 변경 불가 String [] arr = new String[3]

3. 핵심 인터페이스
1) List : 순서가 있음, 중복 허용 // add get size remove contains
2) Set : 순서가 없음, 중복 허용x // add 향상된 for/lterator size remove contains
3) Map : key, value 쌍 // put get(key 향상된 for/lterator size remove contains

◆ 2. Lambda + Stream
1. Lambda ?
- 자바에서 함수적 프로그래밍 지원기법
- 코드 간결하게

- 함수형인터페이스
  : 1개의 추상메서드를 갖는 인터페이스

2. JAVA api의 함수형 인터페이스
1. Consumer - 받는 용도 - accept
2. Supplier - 제공 용도 - get
3. Predicate - 판단하는 용도 - test
4. Function - 처리 용도 - apply
5. Operator - 연산 용도 - apply

3. Stream
데이터 종류에 상관없이 (Stream) 같은 방식으로 처리 (lambda)

◆ 3. JAVA IO
1 . JAVA I/O?
-입력(input)과 출력(output)
- 두 대상간의 데이터를 주고 받는 것
- stream? 사용연결통로

입력스트림	→	[프로그램]	→	출력스트림	
	     InputStream		    OutputStream
	       Reader		         Writer

2. JAVA I/O 분류
- byte 단위(InputStream/OutputStream) - 모든 종류 (그림 문자 멀티미디어 등등...)
- char 단위(Reader/Writer) - 문자에 특화

3. 보조스트림
- 보조스트림?
- new BufferedReader (  new InputStreamReader( new FileInputStream(file) )  )
- 1) new FileInputStream(file) --> byte
- 2) new InputStreamReader --> 바이트를 문자스트림으로 변환 - 텍스트처리가능
- 3) new BufferedReader --> 속도향상
-------------------------------------------------------------------------------------
a 쓰고 a 읽어오고 
b 쓰고 b 읽어오고 
c 쓰고 c 읽어오고 

--> abc 쓰고 abc 읽어오고 (Buffered)


◆ 4. Thread
1. 프로세스 : 실행중인 하나의 프로그램
2. 멀티 프로세스- 동시에 여러 프로세스를 진행
        크롬 → 실행 프로세스 1
              → 실행 프로세스 2
              → 실행 프로세스 3

3. 구성
- 자원( resource ) + Thread( 자원으로 실제 작업을 수행 )
- 모든 프로세스는 최소한 하나의 스레드를 가지고 있음 ( main )
- 같은 프로세스 내의 스레드들은 서로 자원을 공유

4. 동시성과 병렬성
- 동시성과 병렬성: 동시에 실행하는 것 같은 효과
- 동시성 : 하나의 코어에서 멀티스레드가 번갈아가면서 실행하는 것
   일꾼 1명 : 1작업 -> 2작업 -> 3작업 ( 작업수>일꾼수:코어수 )

- 병렬성 : 멀티코어에서 개별스레드를 동시에 실행하는 것 ( 작업수<일꾼수:코어수 )

5. 작업스레드 생성방법
- 1) Thread 상속   2) Runnable 인터페이스 구현   


◆ 5. Network
1. Net 그물 + work 일하다
- 연결된 통신을 이용해서 컴퓨터의 자원을 공유

2. 서버와 클라이언트
[ Client ]     ↔   [ Server ]
서비스 사용       서비스 제공
웹브라우즈        네이버

1) web 프로그래밍 ( Http통신 )
	단방향통신 (Client요청 시 Server응답 후 종료)
2) Soket 프로그래밍 ( 채팅 )
	양방향통신 (Client와 Server사이에 특정 port를 통해 실시간으로 정보를 주고받음-계속 연결되어있음)

3. Soket 
- TCP-연결형 / UDP-비연결형

- TCP : 컴퓨터 연결 , 전화
- UDP : 한쪽에서 일방적으로 데이터를 보내는 것(ex 편지)

4. TCP/IP
- ip 패킷통신 - 작은 단위로 나눠서 전송, 전달보증x, 받는순서와 보내는 순서가 다름
- tcp ip위에서 동작, 데이터의 전달을 보증, 보낸순서대로 받게해주는 역할 

특징 : 연결지향이므로 데이터는 정확하고 안전하게 전달,
	통신선로를 고정하므로 전송속도가 느림

java.net*
java.io*
